name: Advanced CI/CD Pipeline - Priority 10

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily security scan at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security Analysis
  code-analysis:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Run ESLint
      run: npm run lint -- --format=sarif --output-file=eslint-results.sarif
      continue-on-error: true
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: eslint-results.sarif

    - name: Run TypeScript check
      run: npm run type-check
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Dependency vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: npm run test:unit -- --coverage --watchAll=false
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: true

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: npm run test:integration
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: true

    - name: Run E2E tests
      if: matrix.test-type == 'e2e'
      run: npm run test:e2e
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          coverage/
          test-results/
          screenshots/

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [code-analysis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Build application
      run: npm run build
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Bundle size analysis
      run: npm run build:analyze
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Performance benchmark
      run: npm run test:performance
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-analysis, test-suite]
    if: always() && (needs.code-analysis.result == 'success' && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped'))
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Build application
      run: npm run build:full
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: false
        GENERATE_SOURCEMAP: false
        NODE_ENV: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build/
          dist/
        retention-days: 30

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      security-events: write
      
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Container security scan
      uses: anchore/scan-action@v3
      with:
        image: ${{ needs.build.outputs.image-tag }}
        fail-build: false
        severity-cutoff: high

  # Deployment to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'development')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/

    - name: Deploy to Railway (Development)
      uses: railway/cli@v3
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
      env:
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_DEV_PROJECT_ID }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Run smoke tests
      run: npm run test:smoke
      env:
        TEST_URL: ${{ secrets.DEV_URL }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/

    - name: Deploy to Railway (Staging)
      uses: railway/cli@v3
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
      env:
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_STAGING_PROJECT_ID }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Run integration tests against staging
      run: npm run test:staging
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Performance validation
      run: npm run test:performance:staging
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Security validation
      run: npm run test:security:staging
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
        NODE_OPTIONS: "--openssl-legacy-provider"

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/

    - name: Blue-Green Deployment Setup
      run: |
        echo "Setting up blue-green deployment..."
        # Blue-green deployment logic here

    - name: Deploy to Railway (Production)
      uses: railway/cli@v3
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
      env:
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PRODUCTION_PROJECT_ID }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Health check
      run: |
        for i in {1..30}; do
          if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
            echo "Health check passed"
            break
          fi
          echo "Health check failed, retrying in 10 seconds..."
          sleep 10
        done

    - name: Run production smoke tests
      run: npm run test:production
      env:
        TEST_URL: ${{ secrets.PRODUCTION_URL }}
        NODE_OPTIONS: "--openssl-legacy-provider"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Rollback logic here

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Setup monitoring
      run: |
        echo "Setting up post-deployment monitoring..."
        # Monitoring setup logic

    - name: Performance monitoring
      run: |
        echo "Starting performance monitoring..."
        # Performance monitoring logic

    - name: Error tracking setup
      run: |
        echo "Configuring error tracking..."
        # Error tracking setup

    - name: Generate deployment report
      run: |
        echo "Generating deployment report..."
        # Report generation logic

    - name: Update deployment status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: process.env.DEPLOYMENT_URL,
            description: 'Deployment completed successfully'
          });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [post-deployment]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old artifacts..."
        # Cleanup logic

    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Image cleanup logic

    - name: Update metrics
      run: |
        echo "Updating deployment metrics..."
        # Metrics update logic 